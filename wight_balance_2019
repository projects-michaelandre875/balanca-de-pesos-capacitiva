/* ========================================================================================================
   
   Balança capacitiva de pesos com Arduino e LM555
    
   Autor: Eng. Michael André  Data: Junho de 2019
   
   Email: michaelandre875@gmail.com
======================================================================================================== */
// --- Mapeamento de Hardware ---
#define    freq_in   53

// ========================================================================================================
// --- Constantes Auxialires ---
#define    RA    10130.0                // medir com o multimetro, e inserir o valor no codigo
#define    RB    98500.0               // medir com o multimetro, e inserir o valor no codigo

// ========================================================================================================
// --- Protótipo das Funções ---
float cap(float freq, float resA, float resB);

// ========================================================================================================
// --- Variáveis Globais ---

int     H_us = 0,            
        L_us = 0;  
                     
float   T_us = 0.0,       
        frequency = 0.0,       
        cap_val = 0.0,
        tara= 0.0,
        pesoVisor = 0.0,
        peso = 0.00;


const int pinoR = 43,
          pinoG = 45,
          pinoB = 47;

const byte qtdLinhas = 4,
           qtdColunas = 4;

byte PinosqtdLinhas[qtdLinhas] = {38, 40, 42, 44},             //Linhas da matriz do keypad
     PinosqtdColunas[qtdColunas] = {46, 48, 50, 52};          //Colunas da matriz do keypad

// ========================================================================================================
// --- biblioteca do keypad ---
#include <Keypad.h>

//Construção da matriz de caracteres
char matriz_teclas[qtdLinhas][qtdColunas] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

// --- Inicialização do teclado ---
Keypad keypad = Keypad( makeKeymap(matriz_teclas), PinosqtdLinhas, PinosqtdColunas, qtdLinhas, qtdColunas);

// --- bibliotecas do display ---
#include <LiquidCrystal.h>

// ---Pinos utilizados para display---
LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

// ---Flags para atualização de dados---
bool freq_flag = false,
     massa_flag = false,
     capacitancia_flag = false,
     ajustaTara_flag=false;

// ========================================================================================================
// --- Desenvolvimento das Funções ---
// ========================================================================================================
// Função de escrever massa no display

void massa() {
  setColor(0, 0, 255);                              //Parametros para produzir a cor azul
  
  float sensor;      
                         
  if(pesoVisor>=0){                               // Condição para que seja exibido no visor
   sensor = pesoVisor;                           // somente valores positivos
    }                                           // Leitura do peso é armazenada na variável sensor

  lcd.setCursor(0, 0);                        // Posiciona cursor na coluna 0, linha 0
  lcd.print(" ---Balanca---  ");             // Posiciona cursor na coluna 0, linha 0
  lcd.setCursor(0, 1);                      // posicionando cursor na linha 1, coluna 0
  lcd.print ("Peso: ");                    // Escrevendo valores lidos
  lcd.print (sensor, 2);
  lcd.print ("  Kg   ");
  return;
}
// ========================================================================================================
// Função de escrever a capacitancia no display

void capacitancia() {
  setColor(255, 255, 0);                         //Parametros para produzir a cor amarela
  float sensor = cap_val;                       // Leitura da capacitancia e armazenado na variável sensor
  lcd.setCursor(0, 0);                         // Posiciona cursor na coluna 0, linha 0
  lcd.print("---Capacimetro---");             // Posiciona cursor na coluna 0, linha 0
  lcd.setCursor(0, 1);                       // posicionando cursor na linha 1, coluna 0
  lcd.print ("C =  ");                      // Escrevendo valores lidos
  lcd.print (sensor, 3);
  lcd.print (" nF    ");
  return;
}
// ========================================================================================================
// Função de escrever frequncia no display

void frequencimetro() {
  setColor(0, 255, 0);                             //Parametros para produzir a cor verde
  float sensor = frequency;                       // Leitura da frequencia e armazenado na variável sensor
  lcd.setCursor(0, 0);                           // Posiciona cursor na coluna 0, linha 0
  lcd.print("---Frequencia---");                // Posiciona cursor na coluna 0, linha 0
  lcd.setCursor(0, 1);                         // posicionando cursor na linha 1, coluna 0
  lcd.print ("f =  ");                        // Escrevendo valores lidos
  lcd.print (sensor);
  lcd.print (" Hz    ");
  return;
}
// ========================================================================================================
// Função de ajustar a tara no display               

void ajustaTara() {
  setColor(0, 0, 255);                            //Parametros para produzir a cor azul
  lcd.setCursor(0, 0);                           // Posiciona cursor na coluna 0, linha 0
  lcd.print("--Ajustar tara--");                // Posiciona cursor na coluna 0, linha 0
  lcd.setCursor(0, 1);                         // posicionando cursor na linha 1, coluna 0
  lcd.print ("  CALIBRANDO... ");             // Escrevendo valores lidos
  delay(1000);                               // Espera 1 segundo
  lcd.setCursor(0, 1);                      // posicionando cursor na linha 1, coluna 0
  lcd.print ("  CONCLUIDO !!! ");          // Escrevendo valores lidos
  delay(1000);                            // Espera 1 segundo
  return;
}
// ========================================================================================================
// Função verifica se alguma tecla foi pressionada no keypad e chama a função correspondente

void keypadEvent(char key)
{
  switch (keypad.getState())
  {
    case PRESSED:

      if (key == '6') {                       // Chama função massa ao pressionar a tecla 6
        freq_flag = false;
        massa_flag = true;
        capacitancia_flag = false;
        ajustaTara_flag=false;
        massa();
        break;
      }

      if (key ==  '4') {                   // Chama função ajustar tara ao pressionar a tecla 4
        ajustaTara_flag = true;
        
       if (ajustaTara_flag == true) {    
       tara = peso;                     
       }
       else {
       tara = 0.0;
       }
       ajustaTara();
       break;
      }

      if (key ==  '8') {              // Chama função capacitância ao pressionar a tecla 2
        freq_flag = false;
        massa_flag = false;
        capacitancia_flag = true;
        ajustaTara_flag=false;
        capacitancia();
        break;
      }

      if (key ==  '2') {           // Chama função frequência ao pressionar a tecla 8
        freq_flag = true;
        massa_flag = false;
        capacitancia_flag = false;
        ajustaTara_flag=false;
        frequencimetro();
        break;
      }

  }
}
//==========================================================================================================
// --- Configurações Iniciais ---
// =========================================================================================================

void setup()
{
  pinMode(freq_in, INPUT);
  Serial.begin(9600);

  keypad.addEventListener(keypadEvent);

  lcd.begin(16, 2);                                         // Inicio da biblioteca do LCD
  lcd.setCursor(0, 0);                                     // Posiciona cursor na coluna 0, linha 0
  lcd.print(" Sistemas de M. ");                          // Posiciona cursor na coluna 0, linha 0
  lcd.setCursor(0, 1);                                   // Posicionando cursor na linha 1, coluna 0
  lcd.print("Pressione botao:  ");
  
  setColor(128, 0, 255);                               //Parametros para produzir a cor roxa

  pinMode(pinoR, OUTPUT);                            //Define o pino como saída
  pinMode(pinoG, OUTPUT);                           //Define o pino como saída
  pinMode(pinoB, OUTPUT);                          //Define o pino como saída


} //end setup

// ========================================================================================================
// --- Loop Infinito ---
// ========================================================================================================

void loop()
{
  lcd.setCursor(0, 1);                                  // posicionando cursor na linha 1, coluna 0

  char key = keypad.getKey();                         // Exibe na serial a tecla pressionada no keypad

  if (key != NO_KEY)
  {
    Serial.println(key);
  }

  // --- Atualixação de valores ---                // Fixa no display a variavel a ser exibida constantemente

  if (freq_flag == true ) {
    frequencimetro();
  }

  if (massa_flag == true) {
    massa();
  }

  if (capacitancia_flag == true) {
    capacitancia();
  }

  if (ajustaTara_flag == true) {
    massa();
  }
 // =========================================================================================================

  H_us = pulseIn(freq_in, HIGH);                          //lê o tempo em HIGH e armazena em H_us
  L_us = pulseIn(freq_in,  LOW);                         //lê o tempo em  LOW e armazena em L_us

  T_us = float(H_us + L_us);                           //calcula período

  frequency = 1.0E6 / T_us;                          //calcula frequência, multiplica-se por
                                                    // 1000000 pois o período está em micro segundo
   
  cap_val = cap(frequency, RA, RB);               //Retorna o valor da capacitancia 

 // ---Polinomio interpolador---    
 
  //peso = (0.405 + (0.250 * cap_val) + ((cap_val * cap_val) * 0.760)*2);  
 // peso = ((peso*9)+0.3);


    peso= -(0.013* (cap_val * cap_val*cap_val)) + (0.04 * (cap_val * cap_val))+(0.103 * cap_val) + 0.34;
    peso = peso-0.3;
        
    pesoVisor = peso - tara;
    
 // ========================================================================================================
 // ---Dados impressos na serial---   
   
  Serial.print("Capacitancia =  ");
  Serial.print(cap_val, 3);
  Serial.println(" nF ");
  Serial.print("Massa = ");
  Serial.print(peso);
  Serial.println(" kg ");
  Serial.print("TARA = ");
  Serial.print(tara);
  Serial.println(" kg ");
  Serial.print("Massa do visor = ");
  Serial.print(pesoVisor);
  Serial.println(" kg ");
  Serial.print("Frequencia = ");
  Serial.print(frequency/10);
  Serial.println(" kHz ");
  Serial.println(" ");
  Serial.println(" ");

  delay(1000);                           //taxa de atualização

} //end loop


// ========================================================================================================
// --- Desenvolvimento das Funções ---
// ========================================================================================================
// --- Função para cálculo de capacitância ---
//  Calcula capacitância a partir da frequência lida pelo Arduino e constantes RA e RB
//  A equação para o cálculo está no Datasheet do 555, no qual isolou-se o valor de C

float cap(float freq, float resA, float resB) {
  
  float capacitor;                                                          //Variável local para armazenar capacitância
  unsigned int j;
  unsigned int amostras = 200;
  capacitor = 0;

  for (j = 0; j < amostras; j++)
  {
   capacitor = capacitor + 1.0E9 * (1.44 / ((resA + 2 * resB) * freq));  // Calcula capacitância
  }                                                                     // Multiplica-se o resultado por 1.000.000.000
  capacitor = capacitor / amostras;                                    // para obter-se o valor em nF

  return capacitor;                                                  // Retorna o resultado

} //end cap

// ========================================================================================================
//Função que produz o brilho  do led de acordo com os parametros informados
void setColor(int vermelho, int verde, int azul) {

  analogWrite(pinoR, vermelho);
  analogWrite(pinoG, verde);
  analogWrite(pinoB, azul);
}
